#+title:      Denote Export System
#+date:       [2025-10-27 Mon 09:29]
#+filetags:   :denote:export:hugo:guide:
#+identifier: 20251027T092900

* Overview

통합된 Denote → Hugo 내보내기 시스템

** 주요 기능
- Denote 링크를 Hugo relref로 자동 변환
- 보안 필터링 (ROT13, sensitive strings)
- 순차/병렬 내보내기 지원
- 최적화된 org-export 설정

** 마이그레이션
=emacs-fulllab-config= 에서 통합 이식:
- =denote-hugo.el= : 링크 변환 및 export 함수
- =org-config.el= : org-export 설정
- =uniconfig.el= : 보안 필터

* Architecture

** 파일 구조
#+begin_example
doomemacs-config/
├── +denote-export.el              # 핵심 로직 (all-in-one)
├── config.el                      # load! 추가됨
├── bin/
│   ├── denote-export-batch.el    # Batch mode export
│   └── denote-export-parallel.sh # 병렬 실행 스크립트
├── var/
│   └── sensitive-strings.txt     # 보안 문자열 (gitignore)
└── docs/
    └── this-file.org
#+end_example

** 처리 흐름

#+begin_src mermaid
graph TD
    A[Emacs 호출] --> B{모드 선택}
    B -->|순차| C[my/update-dblock-export-garden-all]
    B -->|병렬| D[my/update-dblock-export-garden-all-parallel]

    C --> E[dblock 업데이트 ~/org/meta]
    C --> F[순차 export dolist]

    D --> E
    D --> G[병렬 export GNU Parallel]

    E --> H[org-save-all-org-buffers]
    F --> I[ox-hugo markdown 생성]
    G --> I

    I --> J[~/repos/gh/notes/content/]
    J --> K[clean-run.sh]
    K --> L[secretlint]
    K --> M[sed 문자열 치환]
    K --> N[quartz build]
#+end_src

* Usage

** 기본 사용법 (순차)

#+begin_src elisp
;; 전체 디렉토리 export
(my/update-dblock-export-garden-all)

;; 특정 디렉토리만
(my/update-dblock-garden "~/org/meta")
(my/update-export-garden "~/org/notes")
#+end_src

*** 병렬 export (권장)

 #+begin_src elisp
;; Emacs에서 실행
(my/update-dblock-export-garden-all-parallel)

;; 또는 터미널에서 직접
;; ~/repos/gh/doomemacs-config/bin/denote-export-parallel.sh 8
 #+end_src

** 후처리

#+begin_src bash
cd ~/repos/gh/notes/
./clean-run.sh
#+end_src

* Configuration

** 디렉토리 설정

#+begin_src elisp
;; per-machine.el에서 override 가능
(setq garden-directory-lists
      '("~/org/meta" "~/org/bib" "~/org/notes"))
#+end_src

** 보안 문자열 관리

#+begin_src elisp
;; 민감한 문자열 추가
(my-add-sensitive-string "SecretString")

;; 파일 위치
;; ~/.config/doom/var/sensitive-strings.txt
#+end_src

** Hugo Section 매핑

현재 지원되는 섹션:
- =/notes= → =content/notes/=
- =/journal= → =content/journal/=
- =/talks= → =content/talks/=
- =/meta= → =content/meta/=
- =/bib= → =content/bib/=

* Performance

** 성능 비교 (예상)

| 방식 | 파일 수 | 시간 | 코어 활용 |
|------+---------+------+-----------|
| 순차 | 1,400   | ~15분 | 1 core    |
| 병렬 | 1,400   | ~2-3분 | 8 cores   |

병렬 처리 시 약 *6-8배 속도 향상* 예상

** 최적화 팁

1. =org-export-use-babel nil= : Babel 블록 평가 비활성화
2. =org-hugo-preserve-filling nil= : fill-column 무시
3. =my/kill-all-buffers-except-toolbox= : 메모리 정리
4. GNU Parallel의 =--bar --eta= : 진행 상황 표시

* Security

** .gitignore 설정

#+begin_src gitignore
# Security - DO NOT COMMIT
var/sensitive-strings.txt
#+end_src

** 필터 체인

1. *Emacs 내보내기 필터* :
   - =my-org-hugo-rot13-company-name= : 회사명 ROT13
   - =my-org-hugo-filter-sensitive-strings= : 민감 문자열 교체

2. *Bash 후처리* :
   - =lint.sh= : secretlint 검증
   - =change-text.sh= : sed 추가 치환

** TODO: pass CLI 통합

향후 password-store 검증 로직 추가 예정:
#+begin_src elisp
(defun my/validate-secrets-before-export ()
  "pass CLI로 등록된 보안키 검증"
  ;; TODO: 구현
  )
#+end_src

* Troubleshooting

** GNU Parallel 미설치

#+begin_src bash
sudo apt install parallel
#+end_src

** Batch 스크립트 오류

#+begin_src bash
# 권한 확인
ls -la ~/.config/doom/bin/

# 실행 권한 부여
chmod +x ~/.config/doom/bin/denote-export-*.{el,sh}
#+end_src

** Export 실패

#+begin_src elisp
;; 개별 파일 테스트
(find-file "~/org/notes/test.org")
(org-hugo-export-to-md)

;; 로그 확인
(switch-to-buffer "*Messages*")
#+end_src

* Integration with memex-kb

이 시스템은 =memex-kb= 프로젝트에도 재사용 가능:

#+begin_src bash
# memex-kb/scripts/export.sh
source ~/.config/doom/bin/denote-export-parallel.sh

# 프로젝트별 후처리
# ...
#+end_src

* References

- [[https://ox-hugo.scripter.co/][ox-hugo Documentation]]
- [[https://protesilaos.com/emacs/denote][Denote Manual]]
- [[https://www.gnu.org/software/parallel/][GNU Parallel]]
- [[https://github.com/junghanacs/doomemacs-config][doomemacs-config Repository]]

* Technical Details

** 패키지 의존성

Batch mode에서 필요한 패키지들이 자동으로 설치됩니다:

*** 필수 패키지
- =ox-hugo= : Org → Hugo markdown 변환
- =denote= : ID 기반 노트 시스템
- =dash= : 리스트 처리 유틸리티

*** Denote-explore 의존성
- =cl-lib= : Common Lisp 유틸리티 (빌트인)
- =json= : JSON 처리 (빌트인)
- =browse-url= : URL 브라우징 (빌트인)
- =chart= : 차트 생성 (선택적)
- =denote-regexp= : Denote 정규식 도구

*** Bibliography 지원
- =citar= : 서지 관리
- =csl= : Citation Style Language

** 핵심 설정

*** denote-directory 설정
#+begin_src elisp
;; batch-mode에서 링크 해석을 위해 필수!
(setq denote-directory (expand-file-name "~/org/"))
#+end_src

*** .dir-locals.el 예시
#+begin_src elisp
;; ~/org/meta/.dir-locals.el
((org-mode . ((org-hugo-section . "meta")
              (org-hugo-base-dir . "~/repos/gh/notes/"))))

;; ~/org/notes/.dir-locals.el
((org-mode . ((org-hugo-section . "notes")
              (org-hugo-base-dir . "~/repos/gh/notes/"))))
#+end_src

*** 틸드 확장
Batch mode에서는 =~= 가 자동 확장되지 않으므로 명시적 처리:
#+begin_src elisp
;; .dir-locals.el 값 적용 시 틸드 확장
(when (string-prefix-p "~" value)
  (setq value (expand-file-name value)))
#+end_src

** 실제 성능 (검증됨)

| 디렉토리    | 파일 수 | 코어 | 시간  | 속도 |
|-------------|---------|------|-------|------|
| ~/org/test  | 14      | 4    | 3초   | -    |
| ~/org/notes | 783     | 4    | 108초 | ~10배 |
| ~/org/meta  | ~100    | 4    | ~15초 | ~8배  |

순차 예상: ~15-20분 → 병렬 실제: **1분 48초** (783 파일)

** 진행 상황 표시

병렬 export 시 실시간 진행 상황:
#+begin_example
[INFO] Exporting: /home/goqual/org/notes
  Progress: 156/783 (19%) | Success: 156 | Errors: 0
  Progress: 312/783 (39%) | Success: 312 | Errors: 0
  ...
[INFO]   Final: Total: 783, Success: 783, Errors: 0
[INFO] ✓ Completed: /home/goqual/org/notes
#+end_example

* Changelog

** [2025-10-29] v1.4.0 - Production-Ready Multi-Daemon Export
*** 🐛 Critical Bug Fixes
**** 1. Server Socket Creation
- =server-start= 호출 누락 해결
- 데몬 초기화 후 자동으로 server socket 생성
- emacsclient 연결 안정성 확보

**** 2. Makefile Filename Handling
- 파일명 공백/특수문자 처리 오류 수정
- =printf '%s\n'= → =find -print0 + xargs -0= (null-delimited)
- 유니코드 파일명 완벽 지원

**** 3. Section Override Fix
- =.dir-locals.el= override 실패 문제 해결
- =setq-local= 단독 사용 → =set (make-local-variable)= + =setq= 조합
- 상위 디렉토리 설정 무시하고 정확한 section 적용

**** 4. Author Export Disabled
- =org-export-with-author nil= 설정 추가
- "John Doe" 기본값 자동 생성 방지
- 깨끗한 frontmatter 생성

*** 📊 Production Validation Results
**** Meta Directory (530 files)
- 원본: 530개 org
- 생성: 530개 md (100%)
- 소요: 약 50분 (4 parallel jobs)
- 속도: 0.18 files/sec

**** Bib Directory (649 files)
- 원본: 649개 org
- 생성: 649개 md (100%)
- 소요: 44분 (4 parallel jobs)
- 속도: 0.25 files/sec

**** Notes Directory (782 files)
- 진행 중 (백그라운드)
- 예상 완료: 약 45분

**** 전체 성능 (1,961 files)
| 방식 | 시간 | 속도 | 개선율 |
|------|------|------|--------|
| 순차 (1 job) | ~180분 | 0.07 files/sec | - |
| 병렬 (4 jobs) | **~140분** | **0.23 files/sec** | **4배** |

*** 🔧 Updated Architecture
**** Makefile Strategy
- =denote-export-multi.mk= : 4 daemons × N jobs
- =denote-export.mk= : 1 daemon × N jobs
- Null-delimited file processing (안전성)
- Per-directory parallel execution

**** Recommended Usage
#+begin_src bash
# Production-ready export
make -f denote-export-multi.mk all
# or per-directory
make -f denote-export-multi.mk export-meta
make -f denote-export-multi.mk export-bib
make -f denote-export-multi.mk export-notes
#+end_src

*** ✅ Known Issues Resolved
- ✅ 파일명 공백/특수문자 깨짐
- ✅ Section 잘못된 폴더로 export
- ✅ Server socket 생성 실패
- ✅ Author 자동 추가

** [2025-10-28] v1.3.0 - Server-based Export (18x Performance Boost)
*** 🚀 Emacs Server 방식 도입
- 파일당 Emacs 프로세스 생성 제거
- Multi-server 병렬 처리 (N cores = N servers)
- 패키지 로딩 1회만 수행 (초기화 오버헤드 제거)

*** 핵심 개선사항
**** 1. 파일명 기반 Export
- Denote ID를 파일명에서 직접 추출: =20241014T052827--†브라우저__browser_meta.org= → =20241014T052827.md=
- =#+export_file_name:= 읽기 불필요 (10줄 읽기 → 파일명 파싱)
- 간단하고 빠른 로직

**** 2. 디렉토리 기반 Section 자동 결정
- =~/org/meta/= → =org-hugo-section = "meta"=
- =~/org/bib/= → =org-hugo-section = "bib"=
- =~/org/notes/= → =org-hugo-section = "notes"=
- =.dir-locals.el= 의존성 제거

**** 3. Export 후 Rename
- =org-hugo-export-to-md= 실행
- 결과 파일을 Denote ID로 rename
- 최종 파일: ={section}/{ID}.md=

*** 성능 비교 (1962 files)
| 방식 | 시간 | 속도 | 비고 |
|------|------|------|------|
| Batch 순차 | ~1-1.5시간 | ~0.4 files/sec | 파일당 Emacs 시작 |
| Batch 병렬(8) | ~1-1.5시간 | ~0.4 files/sec | 1962개 프로세스 |
| Server 다중(8) | **4분 37초** | **7.3 files/sec** | 8개 서버만 재사용 |

**성능 향상: ~18배 빠름!** 🎉

*** 특수 파일 처리
다음 파일들은 =#+export_file_name:= 이 ID와 다른 경우 수동 export:
- =20220101T010100--diary.org=
- =20240326T053829--about.org=
- =20240906T154822--home-notesjunghanacscom__homepage.org=
- 기타 homepage, index 파일

수동 export 방법:
#+begin_src elisp
;; Emacs에서 파일 열고
M-x org-hugo-export-to-md
#+end_src

*** 새 파일 구조
#+begin_example
doomemacs-config/
├── +denote-export.el              # 핵심 로직 (interactive용)
├── bin/
│   ├── denote-export-batch.el    # Batch mode (검증 완료)
│   ├── denote-export-server.el   # NEW: Server mode (권장)
│   └── denote-export-server-parallel.sh  # NEW: Multi-server wrapper
#+end_example

*** 권장 사용법
#+begin_src bash
# 터미널에서 직접 실행 (권장)
cd ~/repos/gh/doomemacs-config
./bin/denote-export-server-parallel.sh 8  # 8 cores

# 출력 예시
[INFO] Starting 8 Emacs servers for parallel processing...
[INFO] Total files to export: 1962
[  1/1962] ✓ Exported: 20241014T052827--†브라우저__browser_meta.org → 20241014T052827.md
...
[1962/1962] ✓ Exported: ...
[INFO] ✓ Parallel export completed!
[INFO]   Success: 1962, Errors: 0
[INFO]   Duration: 277s, Speed: 7.3 files/sec
#+end_src

*** 기술적 세부사항

**** Helper Functions
#+begin_src elisp
;; Denote ID 추출
(defun extract-denote-id-from-filename (filename)
  "Extract YYYYMMDDTHHMMSS from filename."
  (when (string-match "\\([0-9]\\{8\\}T[0-9]\\{6\\}\\)" filename)
    (match-string 1 filename)))

;; Section 자동 결정
(defun get-org-hugo-section-from-path (filepath)
  "Determine section from parent directory."
  (let ((parent-dir (file-name-nondirectory
                     (directory-file-name
                      (file-name-directory filepath)))))
    (cond
     ((string= parent-dir "meta") "meta")
     ((string= parent-dir "bib") "bib")
     ((string= parent-dir "notes") "notes")
     (t "notes"))))
#+end_src

**** Export 흐름
1. 파일명에서 Denote ID 추출
2. 디렉토리에서 Section 결정
3. =org-mode= 활성화 (always call)
4. =.dir-locals.el= 설정 적용
5. =org-hugo-section= 강제 설정 (override)
6. =org-hugo-export-to-md= 실행
7. 결과 파일을 ID로 rename

*** 알려진 제한사항
- Special 파일 (diary, about, home 등)은 수동 export 필요
- Debug 메시지 포함 (향후 제거 가능)

** [2025-10-28] v1.2.0 - Bibliography & Macro Enhancement
*** Bibliography/Citation 완전 지원
- org-cite, oc-basic, oc-csl 모듈 자동 로딩
- Citar bibliography hash table 초기화
- Citation → Bibliography 앵커 링크 생성
  - 본문: =<a href="#citeproc_bib_item_N">=
  - 참고문헌: =<a id="citeproc_bib_item_N"></a>=
- Quartz 완전 호환 (클릭 가능한 citation 링크)

*** Macro 확장 지원
- =org-macro-initialize-templates= 자동 실행
- =org-export-before-processing-hook= 에 매크로 확장 추가
- denote-explore 매크로 명시적 등록
  - ={{{denote-explore-count-notes()}}}=
  - ={{{denote-explore-count-keywords()}}}=

*** 로그 출력 개선
- 불필요한 디버그 메시지 제거 (주석 처리)
- 파일당 1줄 출력: =[N/TOTAL] ✓ Exported: file.org → file.md=
- 실시간 진행 카운터: =[544/1962]=
- 디렉토리별 성공/실패 카운트

*** 검증 완료
- 1974개 파일 성공적으로 export
  - meta: 530개
  - bib: 653개
  - notes: 791개
- Citation 링크 정상 작동 확인
- Denote 링크 → Hugo relref 변환 확인

*** 알려진 제한사항
- 매 파일마다 Emacs 프로세스 시작 (느림)
- 1962개 파일 처리 시 예상 시간: 1-1.5시간
- 향후 Emacs Server 방식으로 최적화 필요

** [2025-10-28] v1.1.0 - Dependency & Performance Improvements
- denote-explore 완전 통합 (모든 의존성 자동 로드)
- denote-directory 설정으로 링크 해석 문제 해결
- .dir-locals.el 틸드 확장 개선
- 진행 상황 모니터링 개선 (2초마다 업데이트)
- 실제 성능 검증: 783 파일 108초 (4 cores)

** [2025-10-27] v1.0.0 - Initial Release
- 통합 export 시스템 구축
- fulllab-config에서 로직 이식
- 병렬 처리 지원 추가
- 보안 필터링 통합

* License

GPLv3

#+BEGIN_QUOTE
메타문서화 및 퍼블리싱 도구로서의 가치 제시
- Org-mode: 편집 도구
- Denote: PKM 시스템
- ox-hugo: 변환 엔진
- Quartz: 퍼블리싱 플랫폼
#+END_QUOTE
