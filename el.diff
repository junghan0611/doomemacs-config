Head:     main feat: Add Denote Export System with parallel processing
Merge:    origin/main feat: Add Denote Export System with parallel processing

Unstaged changes (3)
modified   +denote-export.el
@@ -38,10 +38,25 @@ ;;;; Section 0: ox-hugo Configuration
 (when (boundp 'user-hugo-blog-dir)
   (setq org-hugo-base-dir user-hugo-blog-dir))
 
+(setq org-hugo-export-with-toc nil) ; default nil
+
 ;; Lastmod settings
 (setq org-hugo-auto-set-lastmod t
       org-hugo-suppress-lastmod-period 3600.0) ; 1h (86400.0=24h, 172800.0=48h)
 
+;; Append and update time-stamps for
+;; #+hugo_lastmod: Time-stamp: <>
+;; org-hugo-auto-set-lastmod should be nil
+(require 'time-stamp)
+;; (add-hook 'write-file-functions 'time-stamp)
+;; M-x time-stamp
+;; Update last modified date for ox-hugo export
+;; (add-hook 'before-save-hook 'time-stamp)
+(setq time-stamp-active t
+      time-stamp-start "#\\+hugo_lastmod:[ \t]*"
+      time-stamp-end "$"
+      time-stamp-format "\[%Y-%m-%d\]")
+
 ;; Front matter format
 (setq org-hugo-front-matter-format 'yaml)
 
@@ -51,13 +66,19 @@ (add-to-list 'org-hugo-external-file-extensions-allowed-for-copying "webm")
 
 ;; Default section and shortcodes
 (setq org-hugo-section "notes")
-(setq org-hugo-paired-shortcodes "mermaid callout cards details tabs")
+(setq org-hugo-paired-shortcodes "mermaid callout cards details tabs sidenote")
+
+;; https://ox-hugo.scripter.co/doc/formatting/
+;; if org-hugo-use-code-for-kbd is non-nil
+;; Requires CSS to render the <kbd> tag as something special. eg: ~kbd~
+;; (setq org-hugo-use-code-for-kbd t) ; default nil
 
 ;; Link formatting
-(setq org-hugo-link-desc-insert-type t)
+;; (setq org-hugo-link-desc-insert-type t)
 
 ;; Preserve filling - important for export
 (setq org-hugo-preserve-filling nil)
+(setq org-hugo-delete-trailing-ws nil) ;; for quartz
 
 ;; Tag formatting
 (setq org-hugo-allow-spaces-in-tags t)
@@ -70,25 +91,27 @@ (setq org-hugo-default-static-subdirectory-for-externals "images")
 (setq org-hugo-export-creator-string "Emacs + Org-mode + ox-hugo")
 
 ;; Special blocks - raw content
-(add-to-list 'org-hugo-special-block-type-properties '("mermaid" :raw t))
+;; (add-to-list 'org-hugo-special-block-type-properties '("mermaid" :raw t))
 (add-to-list 'org-hugo-special-block-type-properties '("callout" :raw t))
 (add-to-list 'org-hugo-special-block-type-properties '("cards" :raw t))
 (add-to-list 'org-hugo-special-block-type-properties '("details" :raw t))
+(add-to-list 'org-hugo-special-block-type-properties '("sidenote" . (:trim-pre t :trim-post t)))
 
 ;; Bibliography heading
-(plist-put org-hugo-citations-plist :bibliography-section-heading "References")
+;; If this property is set to an empty string, this heading will not be auto-inserted. default value is 'References'
+(plist-put org-hugo-citations-plist :bibliography-section-heading "BIBLIOGRAPHY")
 
 ;; Zero-width space handling
+;; charset: unicode (Unicode (ISO10646)) code point in charset: 0xA0
 (defun my/insert-white-space ()
   "Insert zero-width space character."
   (interactive)
-  (insert " "))
+  (insert " "))
 
 (defun +org-export-remove-white-space (text _backend _info)
   "Remove zero width spaces from TEXT."
   (unless (org-export-derived-backend-p 'org)
-    (replace-regexp-in-string " " "" text)))
-
+    (replace-regexp-in-string " " "" text)))
 (add-to-list 'org-export-filter-final-output-functions
              #'+org-export-remove-white-space t)
 
@@ -130,7 +153,7 @@ (defun my/is-md-file (path)
 (defun my/get-hugo-section-directory-from-path (path)
   "Extract Hugo section from PATH.
 Checks for /notes, /journal, /talks, /meta, /bib directories."
-  (let ((directories '("/test" "/notes" "/journal" "/talks" "/meta" "/bib"))
+  (let ((directories '("/notes" "/journal" "/talks" "/meta" "/bib"))
         (matched-dir nil))
     (dolist (dir directories)
       (when (string-match-p (regexp-quote dir) path)
@@ -143,69 +166,85 @@ (defun my/denote-markdown-export (link desc)
   "Format the way Denote links are exported to markdown.
 If LINK is considered private or a draft, return DESC.
 If LINK is considered a public note, format it as a Hugo relative link.
-
-IMPORTANT: Section is determined by org-hugo-section variable,
-NOT by file path. This ensures URI permanence when files are moved."
-  (condition-case err
-      (let* ((path-id (denote-link--ol-resolve-link-to-target link :full-data))
-             (path (nth 0 path-id))
-             ;; Use org-hugo-section from .dir-locals.el (not path inference!)
-             (section (or org-hugo-section "notes"))
-             (id (nth 1 path-id))
-             (query (nth 2 path-id))
-             (exportfilename (format "%s.md" id))
-             (content-dir (when org-hugo-base-dir
-                            (concat (file-name-as-directory org-hugo-base-dir)
-                                    (format "content/%s/" section))))
-             (exportfilepath (when (and exportfilename content-dir)
-                               (expand-file-name exportfilename content-dir)))
-             (uri (cond
-                   (query (format "%s/%s" exportfilename query))
-                   (t (format "%s" exportfilename)))))
-        ;; Return the formatted link
-        (cond
-         ;; For Digital Garden (Quartz)
-         ((string-match "notes" org-hugo-base-dir)
-          (if (or (my/is-draft-file path) (my/is-md-file path))
-              (format "[%s]" desc)
-            (if exportfilename
-                (format "[%s]({{< relref \"%s/%s\" >}})" desc section exportfilename)
-              (format "[%s]" desc))))
-
-         ;; Fallback
-         (t (format "[%s]" desc))))
-    (error
-     ;; If denote link resolution fails, return plain description
-     (format "[%s]" desc))))
+If USE-RELREF is non-nil, format it as a Hugo relref link."
+  (let* (
+         ;; (path (denote-get-path-by-id link)) ; only i
+         ;; (pathr (file-relative-name (nth 0 path-id)))
+         ;; (final-filename (concat (denote-retrieve-filename-identifier path) ".md"))
+         (path-id (denote-link--ol-resolve-link-to-target link :full-data))
+         (path (nth 0 path-id))
+         (section (my/get-hugo-section-directory-from-path path))
+         (id (nth 1 path-id))
+         (query (nth 2 path-id))
+         ;; (exportfilename (my/get-export-file-name-from-file path))
+         (exportfilename (format "%s.md" id))
+         (content-dir (concat (file-name-as-directory org-hugo-base-dir)
+                              (format "content/%s/" section)))
+         (exportfilepath (when (and exportfilename org-hugo-base-dir)
+                           (expand-file-name exportfilename content-dir)))
+         (uri (cond
+               (query (format "%s/%s" exportfilename query)) ; custom header
+               (t (format "%s" exportfilename)))))
+
+    (format "[%s]" section)
+    ;; (message "%s" (format "[%s]({{< relref \"%s/%s\" >}})" desc section uri))
+
+    ;; 내보낸 파일이 없는 경우 링크 만들지 않도록
+    ;; (if  (not (file-exists-p exportfilepath))
+    ;;     (format "[%s]" desc) ;; 내보낸 파일이 없다면 링크 만들지 마라
+
+    (cond
+     ;; 1) For files in Digital Garden for ALL
+     ;; ((and (string-match "blog" org-hugo-base-dir) (or (my/is-docs-file path) (my/is-blog-file path))) ;;
+     ((string-match "notes" org-hugo-base-dir) ;; for quartz
+      (if (or (my/is-draft-file path) (my/is-md-file path)) ; (my/is-llm-file path) (my/is-docs-file path) (my/is-blog-file path)
+          (format "[%s]" desc)
+        (if exportfilename
+            ;; quartz doesn't support custom header
+            (format "[%s]({{< relref \"%s/%s\" >}})" desc section exportfilename) ; uri
+          (format "[%s]" desc))))
+
+     ;; 2) For files in other directories based on org-hugo-base-dir
+     ;; ((and (string-match "notes" org-hugo-base-dir))
+     ;; ((string-match "notes" org-hugo-base-dir)
+     ;;  (if (my/is-draft-file path)
+     ;;      (format "[%s]" desc)
+     ;;    (if (or (my/is-docs-file path) (my/is-blog-file path))
+     ;;        (format "[%s]" desc)
+     ;;      (if exportfilename
+     ;;          (format "[%s]({{< relref \"%s/%s\" >}})" desc section uri)
+     ;;        (format "[%s]" desc)))
+     ;;    ))
+     ;; Fallback
+     (t (format "[%s]" desc)))
+    ;; ) ; end-of if
+    ))
 
 (defun my/denote-link-ol-export (link description format)
   "Export a `denote:' link from Org files.
-The LINK, DESCRIPTION, and FORMAT are handled by the export backend."
-  (condition-case err
-      (let* ((path-id (denote-link--ol-resolve-link-to-target link :full-data))
-             (path (file-relative-name (nth 0 path-id)))
-             (id (nth 1 path-id))
-             (query (nth 2 path-id))
-             (anchor (file-name-sans-extension path))
-             (desc (cond
-                    (description)
-                    (query (format "denote:%s::%s" id query))
-                    (t (concat "denote:" id)))))
-        (cond
-         ((eq format 'html)
-          (if query
-              (format "<a href=\"%s.html%s\">%s</a>" anchor query desc)
-            (format "<a href=\"%s.html\">%s</a>" anchor desc)))
-         ((eq format 'latex)
-          (format "\\href{%s}{%s}"
-                  (replace-regexp-in-string "[\\{}$%&_#~^]" "\\\\\\&" path) desc))
-         ((eq format 'texinfo) (format "@uref{%s,%s}" path desc))
-         ((eq format 'ascii) (format "[%s] <denote:%s>" desc path))
-         ((eq format 'md) (my/denote-markdown-export link desc))
-         (t path)))
-    (error
-     ;; If link resolution fails, return description as plain text
-     (or description link))))
+The LINK, DESCRIPTION, and FORMAT are handled by the export
+backend."
+  (let* (
+         (path-id (denote-link--ol-resolve-link-to-target link :full-data))
+         (path (file-relative-name (nth 0 path-id)))
+         (id (nth 1 path-id))
+         (query (nth 2 path-id))
+         (anchor (file-name-sans-extension path))
+         (desc (cond
+                (description)
+                (query (format "denote:%s::%s" id query))
+                (t (concat "denote:" id)))))
+    (cond
+     ((eq format 'html)
+      (if query
+          (format "<a href=\"%s.html%s\">%s</a>" anchor query desc)
+        (format "<a href=\"%s.html\">%s</a>" anchor desc)))
+     ((eq format 'latex) (format "\\href{%s}{%s}" (replace-regexp-in-string "[\\{}$%&_#~^]" "\\\\\\&" path) desc))
+     ((eq format 'texinfo) (format "@uref{%s,%s}" path desc))
+     ((eq format 'ascii) (format "[%s] <denote:%s>" desc path))
+     ((eq format 'md)  (my/denote-markdown-export link desc))
+     ;; ((eq format 'md) (format "[%s](%s)" desc path))
+     (t path))))
 
 ;; Register denote link export handler
 (org-link-set-parameters "denote" :export #'my/denote-link-ol-export)
modified   bin/denote-export-batch.el
@@ -77,6 +77,14 @@ (unless (require 'denote nil t)
   (package-install 'denote)
   (require 'denote))
 
+;; Try to require denote-explore (for macros like denote-explore-count-notes)
+(unless (require 'denote-explore nil t)
+  (message "denote-explore not found, attempting to install...")
+  ;; denote-explore is not on MELPA, provide stub functions
+  (defun denote-explore-count-notes () "0")
+  (defun denote-explore-count-keywords () "0")
+  (message "Using stub functions for denote-explore"))
+
 ;; Save original doom-user-dir before loading +user-info
 (defvar original-doom-user-dir doom-user-dir)
 (message "DEBUG: original-doom-user-dir = %s" original-doom-user-dir)
@@ -98,6 +106,11 @@ (unless (boundp 'user-org-directory)
   (defvar user-org-directory (expand-file-name "~/org/"))
   (message "Using default user-org-directory: %s" user-org-directory))
 
+;; Set denote-directory (critical for link resolution!)
+(unless (boundp 'denote-directory)
+  (setq denote-directory (expand-file-name "~/org/"))
+  (message "Set denote-directory: %s" denote-directory))
+
 ;; Ensure org-hugo-base-dir and section are set
 (unless (boundp 'org-hugo-base-dir)
   (setq org-hugo-base-dir user-hugo-blog-dir)
@@ -153,12 +166,17 @@ (defun batch-export-file (file)
           (message "  Final Base (expanded): %s"
                    (when org-hugo-base-dir (expand-file-name org-hugo-base-dir)))
 
-          ;; Verify all required variables are set
+          ;; Verify and expand all required variables
           (unless org-hugo-base-dir
             (error "org-hugo-base-dir is nil!"))
           (unless org-hugo-section
             (error "org-hugo-section is nil!"))
 
+          ;; Force expand tilde in org-hugo-base-dir (critical!)
+          (when (and org-hugo-base-dir (string-prefix-p "~" org-hugo-base-dir))
+            (setq-local org-hugo-base-dir (expand-file-name org-hugo-base-dir))
+            (message "  Expanded org-hugo-base-dir: %s" org-hugo-base-dir))
+
           ;; Export with detailed error tracking
           (let ((result (condition-case export-err
                             (org-hugo-export-to-md)
modified   bin/denote-export-parallel.sh
@@ -45,8 +45,8 @@ BATCH_SCRIPT="$DOOM_DIR/bin/denote-export-batch.el"
 DIRS=(
   # "$ORG_DIR/meta"
   # "$ORG_DIR/bib"
-  # "$ORG_DIR/notes"
-  "$ORG_DIR/test"
+  "$ORG_DIR/notes"
+  # "$ORG_DIR/test"
 )
 
 # Colors for output
@@ -132,21 +132,84 @@ export_parallel() {
 
     log_info "Exporting: $dir"
 
+    # Temporary files
+    local tmp_log="/tmp/denote-export-$$.log"
+    local tmp_errors="/tmp/denote-export-errors-$$.log"
+    local tmp_progress="/tmp/denote-export-progress-$$.txt"
+    local dir_file_count=$(find "$dir" -name "*.org" -type f 2>/dev/null | wc -l)
+
+    echo "0" > "$tmp_progress"
+
+    # Progress monitor function
+    monitor_progress() {
+      local total=$1
+      local log_file=$2
+      local progress_file=$3
+
+      while true; do
+        if [[ ! -f "$log_file" ]]; then
+          sleep 1
+          continue
+        fi
+
+        local current=$(grep -c "^✓ Exported:" "$log_file" 2>/dev/null)
+        local errors=$(grep -c "^✗ Export failed:" "$log_file" 2>/dev/null)
+        local percent=0
+        if [[ $total -gt 0 ]]; then
+          percent=$((current * 100 / total))
+        fi
+
+        # Update progress line (overwrite)
+        printf "\r  Progress: %d/%d (%d%%) | Success: %d | Errors: %d" "$current" "$total" "$percent" "$current" "$errors" >&2
+
+        if [[ $current -ge $total ]]; then
+          echo "" >&2
+          break
+        fi
+
+        sleep 2
+      done
+    }
+
+    # Start progress monitor in background
+    monitor_progress "$dir_file_count" "$tmp_log" "$tmp_progress" &
+    local monitor_pid=$!
+
     # Use parallel processing
-    # Check if GNU Parallel is available (has --version option)
     if command -v parallel &>/dev/null && parallel --version &>/dev/null 2>&1; then
-      # GNU Parallel available
+      # GNU Parallel - quiet mode
       find "$dir" -name "*.org" -type f -print0 | \
-        parallel --null --jobs "$CORES" --bar --eta \
-          'emacs --batch --load '"$BATCH_SCRIPT"' {} 2>&1 | grep -v "^Loading"' || true
+        parallel --null --jobs "$CORES" --no-notice \
+          'emacs --batch --load '"$BATCH_SCRIPT"' {} 2>&1 | grep -E "^✓ Exported|^✗ Export failed"' > "$tmp_log" 2>&1 || true
     else
       # Fallback to xargs
-      log_warn "GNU Parallel not found, using xargs -P (no progress bar)"
+      log_warn "GNU Parallel not found, using xargs -P"
       find "$dir" -name "*.org" -type f -print0 | \
         xargs -0 -P "$CORES" -I {} \
-          emacs --batch --load "$BATCH_SCRIPT" {} 2>&1 | grep -v "^Loading" || true
+          bash -c 'emacs --batch --load '"$BATCH_SCRIPT"' {} 2>&1 | grep -E "^✓ Exported|^✗ Export failed"' > "$tmp_log" 2>&1 || true
     fi
 
+    # Wait for monitor to finish
+    wait "$monitor_pid" 2>/dev/null || true
+
+    # Parse final results
+    local success_count=$(grep -c "✓ Exported:" "$tmp_log" 2>/dev/null)
+    local error_count=$(grep "✗ Export failed:" "$tmp_log" > "$tmp_errors" 2>&1; wc -l < "$tmp_errors")
+
+    log_info "  Final: Total: $dir_file_count, Success: $success_count, Errors: $error_count"
+
+    # Show failed files if any
+    if [[ $error_count -gt 0 ]]; then
+      log_warn "Failed files:"
+      grep "✗ Export failed:" "$tmp_log" | sed 's/.*Export failed: /  - /' | head -10
+      if [[ $error_count -gt 10 ]]; then
+        log_warn "  ... and $((error_count - 10)) more"
+      fi
+    fi
+
+    # Cleanup
+    rm -f "$tmp_log" "$tmp_errors" "$tmp_progress"
+
     log_info "✓ Completed: $dir"
     log_info ""
   done

Recent commits
7a2175b main origin/main feat: Add Denote Export System with parallel processing
0bb3e69 docs: Remove exposed password from mu4e guide
4540546 docs: Add mu4e setup guide
5c18d28 docs: Rename to denote format
74edac6 Remove fortune folder and add to gitignore
57c8e6f Fix: Use hardcoded path for current-task file
ff36ce2 Fix: Wrap py3status hooks with org-clock loader
cedf1d3 Add py3status integration (ElleNajit pattern)
d6978df fix: Remove commented out `term-keys` package
6239903 feat(dashboard): Optimize terminal dashboard for CJK

TODOs (5)
  +denote-export.el TODO: pass CLI integration
  docs/20251027T092900--denote-export-system__denote_export_hugo_guide.org  TODO pass CLI 
  docs/20251027T092900--denote-export-system__denote_export_hugo_guide.org  TODO 구현
  config.el HACK: Prevent the annoting completion error when no `ispell' dictionary is set
  config.el FIXME: this correctly causes '*' to match on whole symbols (e.g., on a
