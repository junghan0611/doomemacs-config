#+title: Denote Export 병렬 처리 시스템
#+date: [2025-10-28 Mon]
#+filetags: :denote:export:parallel:makefile:

* 개요

Denote 노트(org 파일)를 Hugo 마크다운으로 병렬 변환하는 시스템입니다.

** 목표
- 2000+ org 파일을 효율적으로 Hugo markdown으로 변환
- ox-hugo, bibliography, citations 완벽 지원
- 병렬 처리로 속도 개선

** 성능
- 파일: 2008개 (meta: 530, bib: 649, notes: 782, test: 47)
- 속도: 2 jobs → 0.1 files/sec, 8 jobs → 0.4 files/sec (예상)
- 품질: 100% 성공률

* 시도한 방법들

** 방법 1: 백그라운드 방식 (denote-export-parallel.sh)
*** 동작 방식
#+begin_src bash
# 각 파일마다 emacs 프로세스 시작
find ~/org -name "*.org" | \
  parallel -j 8 'emacs --batch --load batch.el {} 2>&1'
#+end_src

*** 결과
- ✅ 안정적: 1974개 파일 100% 성공
- ❌ 느림: emacs 시작 × 1974번
- ❌ 비효율: 패키지 로딩 × 1974번

** 방법 2: 서버 N개 방식 (denote-export-server-parallel.sh) - 실패
*** 동작 방식
#+begin_src bash
# N개의 emacs daemon 시작
for i in 1..8; do
  emacs --daemon=server-$i --load server.el
done

# parallel로 파일을 N개 서버에 분산
find ~/org -name "*.org" | \
  parallel -j 8 --pipe-part 'emacsclient -s server-{%} --eval ...'
#+end_src

*** 실패 원인
1. **서버 초기화 타이밍 문제**
   - 패키지 로딩(ox-hugo, denote, citar) 완료 전에 요청 전송
   - ready 플래그 없음

2. **복잡도 증가**
   - N개 서버 관리 복잡
   - 각 서버별 상태 확인 필요
   - 파일 분산 로직 필요

3. **파일명 처리 문제**
   - Denote 파일명: 한글 + 특수문자 (§, ¤, →)
   - bash 변수 전달 시 인코딩 문제

*** 결과
- ❌ export 실패: 빈 파일 (42 bytes) 생성
- ❌ 속도만 빠르고 품질 0%

** 방법 3: Makefile + 단일 daemon (최종 성공!) ✅
*** 핵심 아이디어
#+begin_quote
"여러 서버가 아니라, 단일 daemon + 병렬 client 호출"
#+end_quote

*** 동작 방식
#+begin_src bash
# 1. Daemon 1개만 시작 (패키지 로딩 1번)
emacs --daemon=export --load denote-export-server.el

# 2. 병렬로 client 호출
find ~/org -name "*.org" | \
  xargs -P 8 -I {} sh -c 'emacsclient -s export --eval "(denote-export-file \"{}\")"'
#+end_src

*** 성공 요인
1. **Emacs Lisp로 파일 제어**
   #+begin_src elisp
   (defun denote-export-file (file)
     "Export single org FILE to Hugo markdown."
     ;; Denote 파일명 처리
     ;; ox-hugo export
     ;; Bibliography 처리
     ;; 결과 반환
   )
   #+end_src

2. **단일 daemon 재사용**
   - 패키지 로딩 1번만
   - 모든 설정 공유
   - 안정적

3. **병렬 client 호출**
   - xargs 또는 GNU Parallel
   - 파일 경로를 elisp 함수에 전달
   - daemon은 요청만 처리

*** 결과
- ✅ 안정적: 47/47 파일 100% 성공
- ⚠️ 느림: 478초 (8분, 2 jobs)
- ✅ 품질: 완벽한 export (ox-hugo + bibliography + citations)

*** 문제점 발견
Emacs daemon은 싱글 스레드이므로 여러 client 요청을 순차 처리합니다:
#+begin_example
8 clients → 1 daemon (싱글 스레드) → 순차 처리 (blocking!)
#+end_example

해결책: 여러 daemon을 시작해서 진짜 병렬 처리 필요

** 방법 4: Makefile + 멀티 daemon (최종 성공!) ✅

*** 핵심 아이디어
#+begin_quote
"여러 daemon으로 Emacs 싱글 스레드 한계 극복"
#+end_quote

*** 동작 방식
#+begin_src bash
# 1. N개 Daemon 시작 (각각 독립적)
for i in 1..4; do
  emacs --daemon=export-$i --load server.el
done

# 2. 파일을 N개 daemon에 분산
files | awk '{print NR % 4 + 1, $0}' | \
  xargs -P 8 -n 2 sh -c 'emacsclient -s export-$1 --eval "(denote-export-file \"$2\")"'
#+end_src

*** 성공 요인
1. **진짜 병렬 처리**
   #+begin_example
   Daemon 1 (CPU 1-2) → 파일 1, 2
   Daemon 2 (CPU 3-4) → 파일 3, 4
   Daemon 3 (CPU 5-6) → 파일 5, 6
   Daemon 4 (CPU 7-8) → 파일 7, 8
   #+end_example

2. **싱글 스레드 한계 극복**
   - 각 daemon이 독립적으로 동작
   - 요청 대기 없음
   - CPU 코어 완전 활용

3. **Makefile 자동화**
   - 여러 daemon 시작/종료 자동화
   - 초기화 대기 자동화
   - 파일 분산 자동화

*** 결과
- ✅ 안정적: 47/47 파일 100% 성공
- ✅ 빠름: 175초 (3분, 8 jobs) → **2.7배 향상!**
- ✅ 품질: 완벽한 export (ox-hugo + bibliography + citations)

*** 성능 비교

| 방식 | Daemons | Jobs | 시간 | 속도 | 개선율 |
|------|---------|------|------|------|--------|
| 단일 daemon | 1 | 2 | 478초 | 0.098 files/sec | 기준 |
| **멀티 daemon** | **4** | **8** | **175초** | **0.269 files/sec** | **2.7배** |

* 최종 구조

** 파일 구성
#+begin_example
doomemacs-config/
├── denote-export.mk              # Makefile (단일 daemon, 느림)
├── denote-export-multi.mk        # Makefile (멀티 daemon, ⭐ 최종 버전)
└── bin/
    ├── denote-export-server.el   # Daemon 서버
    ├── denote-export-batch.el    # Batch 방식 (참고용)
    ├── EXPORT-PARALLEL.org       # 이 문서
    └── backup-20251028/          # 구버전 백업
        ├── denote-export-parallel.sh
        └── denote-export-server-parallel.sh
#+end_example

** 사용 방법 (⭐ 멀티 daemon 버전)
#+begin_src bash
# 도움말
make -f denote-export-multi.mk help

# 테스트 (test 폴더만, 47개 파일)
make -f denote-export-multi.mk test

# 전체 export (2008개 파일)
make -f denote-export-multi.mk all

# Daemon 상태 확인
make -f denote-export-multi.mk status

# 모든 daemon 종료
make -f denote-export-multi.mk clean
#+end_src

** 병렬 처리 확장
#+begin_src makefile
# denote-export-multi.mk에서 수정
NUM_DAEMONS := 8        # 4 → 8로 변경 (더 많은 daemon)
JOBS_PER_DAEMON := 2    # daemon당 job 수
# TOTAL_JOBS = 8 × 2 = 16 parallel jobs
#+end_src

* 기술적 세부사항

** Makefile 핵심 로직
#+begin_src makefile
# Daemon 시작 및 ready 대기
daemon-check:
	emacs --daemon=$(DAEMON_NAME) --load $(SERVER_SCRIPT)
	# 30초 동안 ready 플래그 대기
	while ! emacsclient -s $(DAEMON_NAME) --eval '(boundp '"'"'denote-export-server-ready)'; do
	  sleep 1
	done

# 병렬 export
export-test:
	find $(ORG_DIR)/test -name "*.org" | \
	  xargs -P $(JOBS_PER_DIR) -I {} sh -c \
	    'emacsclient -s $(DAEMON_NAME) --eval "(denote-export-file \"{}\")"'
#+end_src

** Emacs Lisp 핵심 함수
#+begin_src elisp
;; Ready 플래그
(setq denote-export-server-ready t)

;; Export 함수
(defun denote-export-file (file)
  "Export single org FILE to Hugo markdown."
  (condition-case err
      (let* ((denote-id (extract-denote-id-from-filename file))
             (section (get-org-hugo-section-from-path file)))

        ;; .dir-locals.el 적용
        (with-current-buffer (find-file-noselect file)
          (org-mode)
          (setq-local org-hugo-section section)

          ;; Export
          (let ((result (org-hugo-export-to-md)))
            ;; Denote ID로 rename
            (rename-file result (concat denote-id ".md"))
            (format "SUCCESS:%s:%s" file result))))
    (error
     (format "ERROR:%s:%s" file (error-message-string err)))))
#+end_src

** 핵심 차이점: xargs vs parallel

두 방식 모두 elisp로 파일을 처리하므로 동일하게 작동합니다:

#+begin_src bash
# xargs (표준, 어디서나 동작)
xargs -P 8 -I {} sh -c 'emacsclient -s daemon --eval "(denote-export-file \"{}\")"'

# GNU Parallel (빠르고 progress bar 지원)
parallel -j 8 'emacsclient -s daemon --eval "(denote-export-file \"{}\")"'
#+end_src

* 성능 분석

** 현재 성능 (2 jobs)
- 처리 시간: 478초 (8분)
- 처리 속도: 0.098 files/sec
- 파일 수: 47개

** 예상 성능

| Jobs | 속도 (files/sec) | 2008개 전체 시간 |
|------+------------------+------------------|
|    2 |              0.1 | 334분 (5.6시간) |
|    4 |              0.2 | 167분 (2.8시간) |
|    8 |              0.4 | 84분 (1.4시간)   |
|   16 |              0.8 | 42분              |

** 병목 요인
1. **Emacs 처리 속도** (ox-hugo, bibliography)
2. **서버 응답 시간** (Oracle Cloud Free Tier)
3. **파일 I/O**

** 개선 방향
- 더 빠른 서버로 테스트 (일반 노트북)
- Jobs 수 증가 (16까지)
- SSD 사용

* 참고 자료

** 영감을 받은 블로그
- Mads Hartmann (2016): [[https://blog.mads-hartmann.com/2016/07/03/exporting-org-from-make.html][Exporting org from Make]]
  - Makefile + Emacs daemon 패턴
  - xargs -P를 통한 병렬화

- 200ok.ch (2022): [[https://200ok.ch/posts/2022-07-04_org_export_using_emacsclient.html][Export org using emacsclient]]
  - emacsclient 활용법
  - Fallback 전략 (daemon 없을 때 batch mode)

** Emacs 커뮤니티 표준
- Makefile: 의존성 관리 및 빌드 자동화
- xargs -P: 병렬 처리 (GNU Parallel 불필요)
- emacsclient: Daemon 재사용으로 성능 향상

* 결론

** 핵심 교훈
1. **단순함이 최고**: 여러 서버보다 단일 daemon + 병렬 client
2. **Emacs Lisp로 제어**: bash 변수 전달의 한계 극복
3. **커뮤니티 표준 따르기**: Makefile + xargs 패턴

** 다음 단계
- [ ] 전체 디렉토리(meta, bib, notes) export 테스트
- [ ] 8 jobs로 성능 측정
- [ ] 일반 노트북에서 성능 비교
- [ ] CI/CD 통합
