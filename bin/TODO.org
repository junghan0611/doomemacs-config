#+title: Denote Export 병렬 처리 - 해결 완료 ✅
#+date: [2025-10-28 Mon 18:17]
#+filetags: :denote:export:parallel:makefile:success:

* 최종 해결 방법 (2025-10-28) ✅

** 핵심 발견
#+begin_quote
"여러 서버가 아니라, 단일 daemon + 병렬 client 호출"
#+end_quote

** 성공 요인
1. **Emacs Lisp로 파일 제어** - Denote 파일명 완벽 처리
2. **Makefile + xargs** - 표준 도구 조합
3. **단일 daemon 재사용** - 패키지 로딩 1번만

** 성능
- 47/47 파일 100% 성공
- 478초 (8분, 2 jobs)
- 품질: 완벽 (ox-hugo + bibliography + citations)

** 참고 문서
- [[file:EXPORT-PARALLEL.org][EXPORT-PARALLEL.org]] - 상세 문서

---

* 과거 시도 기록 (실패 사례)

** 방법 1: 백그라운드 방식 (안정적이지만 느림)
- a61dbe3 (백그라운드 방식): ✅ 작동 (1974개 성공) / ❌ 느림 (emacs 시작 × 1974번)

** 방법 2: 서버 N개 방식 (실패)
- 7d70b79 (서버 N개 방식): ✅ 빠름 (18배 속도) / ❌ export 실패

** 근본 원인
서버가 완전히 초기화되기 전에 파일 처리 요청이 들어감

#+begin_example
[타임라인]
T0: 서버 시작
T1: 패키지 로딩 시작 (org, ox-hugo, denote, citar, etc.)
T2: parallel.sh가 서버 응답 확인 → OK!
T3: 바로 파일 처리 요청 전송
T4: 패키지 로딩 완료 ← 너무 늦음!
     ↑
   충돌 발생!
#+end_example

* 해결 전략

** 1단계: server.el에 준비 완료 신호 추가

*** 위치
=bin/denote-export-server.el= 마지막 부분

*** 수정 내용
#+begin_src elisp
;; 현재 (마지막 줄)
(message "[Server] ========================================")
(message "[Server] Denote Export Server Ready!")
(message "[Server] Server name: %s" denote-export-server-name)
(message "[Server] Export function: denote-export-file")
(message "[Server] ========================================")

;;; denote-export-server.el ends here

;; ↓ 수정 ↓

;; 모든 초기화 완료 후 준비 완료 플래그 설정
(setq denote-export-server-ready t)

(message "[Server] ========================================")
(message "[Server] Denote Export Server READY!")
(message "[Server] Server name: %s" denote-export-server-name)
(message "[Server] Export function: denote-export-file")
(message "[Server] Ready flag: %s" denote-export-server-ready)
(message "[Server] ========================================")

;;; denote-export-server.el ends here
#+end_src

** 2단계: parallel.sh에서 진짜 준비 완료 대기

*** 위치
=bin/denote-export-server-parallel.sh= 의 =start_servers()= 함수

*** 현재 코드 (line 100-120)
#+begin_src bash
# Wait for this server to be ready (max 10 seconds per server)
local timeout=10
local elapsed=0
while ! emacsclient -s "$server_name" --eval 't' &>/dev/null; do
  if [[ $elapsed -ge $timeout ]]; then
    log_error "Server $i failed to start within ${timeout}s"
    exit 1
  fi
  sleep 0.5
  elapsed=$((elapsed + 1))
done
#+end_src

*** 수정 내용
#+begin_src bash
# Wait for server to start (basic check)
local timeout=10
local elapsed=0
while ! emacsclient -s "$server_name" --eval 't' &>/dev/null; do
  if [[ $elapsed -ge $timeout ]]; then
    log_error "Server $i failed to start within ${timeout}s"
    exit 1
  fi
  sleep 0.5
  elapsed=$((elapsed + 1))
done

# Wait for server to be FULLY ready (packages loaded)
log_info "Server $i started, waiting for full initialization..."
elapsed=0
timeout=30  # 패키지 로딩은 더 오래 걸릴 수 있음
while ! emacsclient -s "$server_name" --eval '(boundp '"'"'denote-export-server-ready)' 2>/dev/null | grep -q 't'; do
  if [[ $elapsed -ge $timeout ]]; then
    log_error "Server $i initialization timeout (${timeout}s)"
    # 디버그 정보 출력
    emacsclient -s "$server_name" --eval '(message "Server status: packages loading...")' 2>&1 || true
    exit 1
  fi
  sleep 1
  elapsed=$((elapsed + 1))
done

log_info "✓ Server $i fully initialized"
#+end_src

** 3단계: 테스트 및 검증

*** 작은 테스트
#+begin_src bash
# meta 폴더만 (2개 서버)
./bin/denote-export-server-parallel.sh 2
#+end_src

예상 동작:
1. 서버 2개 시작
2. 각 서버가 패키지 로딩 (30초 이내)
3. "✓ Server 1 fully initialized"
4. "✓ Server 2 fully initialized"
5. export 시작
6. 모든 파일 정상 export

*** 전체 테스트
#+begin_src bash
# meta + bib + notes (8개 서버)
./bin/denote-export-server-parallel.sh 8
#+end_src

예상 결과:
- 1974개 파일 export 성공
- 4-5분 내 완료 (18배 속도 유지)

* 추가 이슈: 파일명 특수 문자 처리

** 문제
Org 파일명에 non-breaking space (U+00A0, #xa0, codepoint 160)가 포함될 수 있음
- 일반 공백 (U+0020, ASCII 32)이 아님
- 파일명 파싱 시 정확히 그대로 처리 필요

** 현재 코드 확인
#+begin_src bash
# parallel.sh에서 (line 215-220)
find "$dir" -name "*.org" -type f -print0 | \
  parallel --null --jobs "$CORES" --no-notice --line-buffer \
    'emacsclient -s '"$SERVER_NAME"'-{%} --eval "(denote-export-file \"{}\")"'
#+end_src

현재 상태:
- ✅ =-print0=: null-terminated 출력 (공백 안전)
- ✅ =--null=: null-separated 입력 처리
- ⚠️ ="{}"=: 파일 경로 quote 처리 확인 필요

** 검증 필요
1. Non-breaking space 포함 파일명 테스트
2. Elisp에서 파일명 받을 때 encoding 확인
3. 필요시 raw string 처리

* 기술적 상세

** 왜 이 방식이 필요한가?

Emacs daemon의 특성:
1. =--daemon= 시작 → 백그라운드 프로세스 생성
2. TCP 소켓 준비 → =emacsclient= 연결 가능
3. 하지만 =load= 명령어는 비동기적으로 계속 실행 중
4. 패키지 초기화 (ox-hugo, denote, citar 등) 시간 필요

현재 문제:
- 2번 완료만 확인하고 3번이 완료되지 않은 상태에서 작업 시작
- 패키지가 로딩되지 않아 export 실패

해결:
- 명시적 준비 완료 플래그로 3번 완료 확인

** 블로그 참고 (Mads Hartmann, 2016)

핵심 통찰:
#+begin_quote
"The daemon keeps an Emacs instance running in the background,
eliminating the repeated startup overhead."
#+end_quote

우리의 적용:
- ✅ 데몬 사용으로 시작 오버헤드 제거
- ✅ 서버 N개로 진짜 병렬 처리
- ⚠️ 초기화 대기 로직 추가 필요 ← 현재 이슈

* 체크리스트

- [ ] server.el에 =denote-export-server-ready= 플래그 추가
- [ ] parallel.sh의 =start_servers()= 함수 수정
- [ ] 작은 테스트 (2 cores, meta only)
- [ ] 성공 확인 후 전체 테스트 (8 cores, all dirs)
- [ ] 성능 측정 (속도 유지 확인)
- [ ] git commit

* 참고 자료

- 작동했던 커밋: =a61dbe3= (백그라운드 방식)
- 속도 개선 커밋: =7d70b79= (서버 N개 방식, 현재 문제)
- 블로그: https://blog.mads-hartmann.com/2016/07/03/exporting-org-from-make.html
